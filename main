import random

def materialSimulation(iterations, materialCost, numProductsHum, numProductsMach, workingHoursHum, workingHoursMach):
    
    #This method takes information pertaining to the cost due to human or machine error.
    
    humanCost = 0
    machCost = 0
    for i in range(iterations):
        machineMistakes = random.random()  #random number between 0 and 1 that is then divided by 200
        #print(machineMistakes)
        
        machineMistakesRate = machineMistakes/200  #equivalent to less than half a percent 
        #the greater the number it is divided by, lower the percentage
        #print(machineMistakesRate)
        
        personMistakes = random.random() #random number between 0 and 1 that is then divided by 25
        #print(personMistakes)
        
        personMistakesRate = personMistakes/25 #equivalent to anything less than 4 percent
        

        productMistakeHum = numProductsHum * personMistakesRate * workingHoursHum 
        #calculating the total number of mistakes due to human error
        
        humanCost += productMistakeHum #adds it to human cost for # of iterations
        #numProductsHum is determined by number of pieces a human makes in 1 hour
        
        productMistakeMach = numProductsMach * machineMistakesRate * workingHoursMach 
        #calculating the total number of mistakes due to machine error
        machCost += productMistakeMach 
        #numProductsMach is determined by number of pieces a machine makes in 1 hour
        
    
    mistakeCostHum = (humanCost*materialCost)/iterations 
    #divides by # of iterations to get the average cost due to mistakes by human
    
    mistakeCostMach = (machCost*materialCost)/iterations
    #divides by # of iterations to get the average cost due to mistakes by machine
    
    return mistakeCostHum, mistakeCostMach #return both values
    
    
    
def maintenance(iterations, mFreq, machQual, mCost, rCost):
    
    #This method takes information pertaining to the maintenance of the machine.
    #calculates the cost to maintain the machine
    
    maintenanceYear = mFreq * 12 #calculates the number of inspects required per year
    rFreq = 0 #calculates the repair frequencies
    for i in range(iterations): #iterates through all 1 million times 
                                #and adds the percentages and then divides by the number of iterations
        if(machQual == 1):
            rFreq += (random.random()/12.5) #percentage is less than 8%
        elif(machQual == 2):
            rFreq += (random.random()/25) #percentage is less than 4%
        elif(machQual == 3):
            rFreq += (random.random()/50) #percentage is less than 2%
    rFreq = rFreq/iterations   
    
    repairYear = rFreq * 12 #calculates the number of times a repair is required per year
    
    #print(rFreq, repairYear)
    
    maintenanceCost = maintenanceYear * mCost #calculates total maintenanceCost
    repairCost = repairYear * rCost #calculates total repairCost
    
    #print(repairCost)
    costs = [maintenanceCost, repairCost] 
    return costs #returns the costs 

def simulation(machUnitsPerHour, humUnitsPerHour, hoursOfUseMach, hoursOfUseHum,
               humPay, rawMaterialCost, productPrice, profitMargin, materialCost,
               materialSavings, mCosts, rCosts, annualSavings):
    
     #This method takes information pertaining to the overall simulation and prints all the information.
    print("\nASSUMED VALUES:\n")
    print("Units produced by machine per hour: "+ str(machUnitsPerHour))
    print("Units produced by human per hour: " +str(humUnitsPerHour))
    print("Total hours of machine use per year: "+str(hoursOfUseMach))
    print("Total working hours by employee per year: "+str(hoursOfUseHum))
    print("Hourly wage of employee: $"+str(humPay)+"/hour")
    print("Raw material cost: $"+str(rawMaterialCost))
    print("Product selling price: $"+str(productPrice))
    print("Profit margin: $"+str(profitMargin)+"\n")
    
    print("CALCULATED COSTS:\n")
    
    print("Cost due to human mistake: $" + str(round(materialCost[0], 2)))
    print("Cost due to machine mistake: $" + str(round(materialCost[1], 2)))
    print("Material Savings: $"+str(materialSavings))
    print("Maintenance Costs per year: $" + str(round(mCosts, 2)))
    print("Repair costs per year: $"+ str(round(rCosts, 2))+"\n")
    
    print("SAVINGS:")
    print("*note* These values do not account for the upfront \n       cost of lease."
          " It wouldn't be cost efficient \n       if the lease is less than these saving amounts.\n")
    leaseTerm = 3 #prints out 4 different lease types (3 month, 6 month, 12 month and 24 month )
    for i in range(4):
        print(str(leaseTerm)+" month lease: $"+str(round(annualSavings * (leaseTerm/12), 2)))
        leaseTerm *= 2
    

def main():
    iterations = 1000000 #1 million variations to cover all potential scenario's

    print("The purpose of this program is to help you decide whether it is more valuable "
          "to higher an employee (paid at a specific wage) or to lease a machine "
          "to do the same job. This program accounts for human error, working speed and "
          "maintenance costs.\n") #header
    
    userAnswer = int(input("Please select one of the options:\nInput your own information (1)?\nSee example simulations (2)?\n"))
        #initial question for the user
    
    if(userAnswer == 1): #if user asks to input their own data they get a series of questions
        name = input("What machine are you thinking of leasing? ")
        numProductsMach = eval(input("How many units an hour does the "+name+" operate on? "))
        numHoursMach = eval(input("How many hours a week is the "+ name+" operating? "))
        machineWeeks = 0
        numWeeksMach = str(input("Does the "+name+" operate year-round(52 weeks)? Answer 'yes' or 'no'. "))
        if numWeeksMach == "yes":
            machineWeeks += 52
        elif numWeeksMach == "no":
            machineWeeks += int(input("How many weeks per year does the machine operate? "))
            
        numProductsHum = eval(input("How many units an hour does your employee work on? "))
        numHoursHum = eval(input("How many hours a week does your employee work? "))
        numWeeksHum = eval(input("How many weeks per year does your employee work? "))
        laborCost = eval(input("How much (per hour) do you pay the employee? "))
        rawMaterialCost = eval(input("Cost of raw materials per unit of product? "))
    
    
        hoursOfUseHum = numHoursHum * numWeeksHum  #calculates total number of hours a person works
        
        laborCostYear = laborCost * hoursOfUseHum  #calculates total amount to pay a worker for how much they work
        #print(laborCostYear)
        #print(hoursOfUseHum)
        hoursOfUseMach = numHoursMach * machineWeeks #calculates total number of hours a machine works
        
        totalProductsHum = numProductsHum *hoursOfUseHum #calculates how many products a person makes
        
        totalProductsMach = numProductsMach *hoursOfUseMach #calculates how many products a machine makes
        #print(hoursOfUseMach)
        
        materialCost = materialSimulation(iterations, rawMaterialCost, numProductsHum, numProductsMach, hoursOfUseHum, hoursOfUseMach)
        print("Cost due to human mistake: $" + str(round(materialCost[0], 2)))
        print("Cost due to machine mistake: $" + str(round(materialCost[1], 2)))
        print("Material Savings: $"+str(round(materialCost[0]-materialCost[1], 2)))
        
        materialSavings = round(materialCost[0]-materialCost[1], 2)
        
        
        #asking machine repair questions here: 
        maintenanceFreq = eval(input("How often does the "+name+" have to be inspected (per month)? "))
        #repairFreq = eval(input("How many repairs per month (on average)?"))
        maintenanceCost = eval(input("How much does an inspection cost? "))
        repairCost = eval(input("How much does a single repair cost (on average)? "))
        quality = int(input("What is the quality of the machine(1-2-3)? | (3 being very good) "))
        
        
        costs = maintenance(iterations, maintenanceFreq, quality, maintenanceCost, repairCost)
        mCosts , rCosts = costs[0] , costs[1]
        print("Maintenance Costs per year: $" + str(round(mCosts, 2)) ,"\nRepair costs per year: $"+ str(round(rCosts, 2)))
    
    
        productCost = eval(input("How much do you sell your product for? (A single unit) "))
        totalPCost = productCost - rawMaterialCost #calculates total product cost
        numberSold = (totalProductsMach-totalProductsHum)*totalPCost #calculates number sold 
        annualSavings = ((materialSavings-mCosts-rCosts)+laborCostYear)+numberSold #calculates annual savings
        print("Annual Savings from leasing the "+name+": $"+str(round(annualSavings, 2)))
        
        leaseTerm = eval(input("How long is the lease for in months? "))
        calculatedSavings = annualSavings * (leaseTerm/12) #takes annual savings and multiplies it by the num months of 12
        print("Savings from leasing the "+name+" opposed to paying an employee: $" + str(round(calculatedSavings, 2)))
        print("It isn't cost efficient to pay for a lease more than: $" + str(round(calculatedSavings, 2)))
        
    elif(userAnswer == 2): #selects to see other options 
        options = int(input("Which machine lease example would you like to see?\nPlease input number\n"
                            "1. Wood Splitter\n2. Clothing Design Printer\n3. Industrial Welder\nChoice: "))
        if (options == 1):  #wood splitter
            #assumed inputs based on logic and online searches
            machUnitsPerHour = 350
            machHoursPerWeek = 40
            machWeeksPerYear = 30
            humUnitsPerHour = 100
            humHoursPerWeek = 40
            humWeeksPerYear = 30
            humPay = 15 #people who work in the lumber industry 
                        #typically make good pay because of the dangers involved
            rawMaterialCost = 0.35
            
            #calculations are the same as above 
            hoursOfUseHum = humHoursPerWeek * humWeeksPerYear
            laborCostYear = humPay * hoursOfUseHum
            hoursOfUseMach = machHoursPerWeek * machWeeksPerYear
            materialCost = materialSimulation(iterations, rawMaterialCost, humUnitsPerHour, machUnitsPerHour, hoursOfUseHum, hoursOfUseMach)
            
            numProductsHum = humUnitsPerHour *hoursOfUseHum
            numProductsMach = machUnitsPerHour * hoursOfUseMach
            
            inspectFreq = 2
            inspectCost = 40
            repairCost = 350
            machQual = 2
            productPrice = 1.20
            profitMargin = productPrice - rawMaterialCost
            materialSavings = round(materialCost[0]-materialCost[1], 2)
        
            costs = maintenance(iterations, inspectFreq, machQual, inspectCost, repairCost)
            mCosts , rCosts = costs[0] , costs[1]
           
            totalPCost = productPrice - rawMaterialCost
            numberSold = (numProductsMach-numProductsHum)*totalPCost
            annualSavings = ((materialSavings-mCosts-rCosts)+laborCostYear)+numberSold
        
            simulation(machUnitsPerHour, humUnitsPerHour, hoursOfUseMach, hoursOfUseHum,
                       humPay, rawMaterialCost, productPrice, profitMargin, materialCost,
                       materialSavings, mCosts, rCosts, annualSavings)
            
        if (options == 2): #clothing design printer
            machUnitsPerHour = 50
            machHoursPerWeek = 40
            machWeeksPerYear = 52
            humUnitsPerHour = 30
            humHoursPerWeek = 40
            humWeeksPerYear = 46.8 #average weeks per year for a full time employee
            humPay = 10 #minimum wage in CT
            rawMaterialCost = 1.20
            
            hoursOfUseHum = humHoursPerWeek * humWeeksPerYear
            laborCostYear = humPay * hoursOfUseHum
            hoursOfUseMach = machHoursPerWeek * machWeeksPerYear
            materialCost = materialSimulation(iterations, rawMaterialCost, humUnitsPerHour, machUnitsPerHour, hoursOfUseHum, hoursOfUseMach)
            
            numProductsHum = humUnitsPerHour *hoursOfUseHum
            numProductsMach = machUnitsPerHour * hoursOfUseMach
            inspectFreq = 1
            inspectCost = 75
            repairCost = 500
            machQual = 3
            productPrice = 5.75
            profitMargin = productPrice - rawMaterialCost
            materialSavings = round(materialCost[0]-materialCost[1], 2)
        
            costs = maintenance(iterations, inspectFreq, machQual, inspectCost, repairCost)
            mCosts , rCosts = costs[0] , costs[1]
           
            totalPCost = productPrice - rawMaterialCost
            numberSold = (numProductsMach-numProductsHum)*totalPCost
            annualSavings = ((materialSavings-mCosts-rCosts)+laborCostYear)+numberSold
        
            simulation(machUnitsPerHour, humUnitsPerHour, hoursOfUseMach, hoursOfUseHum,
                       humPay, rawMaterialCost, productPrice, profitMargin, materialCost,
                       materialSavings, mCosts, rCosts, annualSavings)
            
        if (options == 3):  #welder
            machUnitsPerHour = 200
            machHoursPerWeek = 40
            machWeeksPerYear = 52
            humUnitsPerHour = 100
            humHoursPerWeek = 70  #welder's are known for working overtime
            humWeeksPerYear = 46.8 #average weeks per year for a full time employee
            humPay = 18 #it is strenuous and dangerous so welders get paid a decent amount
            rawMaterialCost = 3.50 #metal is typically more expensive
            
            hoursOfUseHum = humHoursPerWeek * humWeeksPerYear
            laborCostYear = humPay * hoursOfUseHum
            hoursOfUseMach = machHoursPerWeek * machWeeksPerYear
            materialCost = materialSimulation(iterations, rawMaterialCost, humUnitsPerHour, machUnitsPerHour, hoursOfUseHum, hoursOfUseMach)
            
            numProductsHum = humUnitsPerHour *hoursOfUseHum
            numProductsMach = machUnitsPerHour * hoursOfUseMach
            inspectFreq = 3
            inspectCost = 50
            repairCost = 1000
            machQual = 3
            productPrice = 8.50
            profitMargin = productPrice - rawMaterialCost
            materialSavings = round(materialCost[0]-materialCost[1], 2)
        
            costs = maintenance(iterations, inspectFreq, machQual, inspectCost, repairCost)
            mCosts , rCosts = costs[0] , costs[1]
           
            totalPCost = productPrice - rawMaterialCost
            numberSold = (numProductsMach-numProductsHum)*totalPCost
            annualSavings = ((materialSavings-mCosts-rCosts)+laborCostYear)+numberSold
        
            simulation(machUnitsPerHour, humUnitsPerHour, hoursOfUseMach, hoursOfUseHum,
                       humPay, rawMaterialCost, productPrice, profitMargin, materialCost,
                       materialSavings, mCosts, rCosts, annualSavings)

    

main()   
